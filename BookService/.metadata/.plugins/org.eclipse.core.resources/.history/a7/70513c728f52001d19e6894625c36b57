package com.digitalbooks.bookservice.controller

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.digitalbooks.bookservice.entity.Book;
import com.digitalbooks.bookservice.entity.Subscription;
import com.digitalbooks.bookservice.entity.User;
import com.digitalbooks.bookservice.service.BookService;



@RestController
public class BookController {

	@Autowired
	private BookService bookService;

	@Autowired
	private UserService userService;

	@Autowired
	private SubscriptionService subscriptionService;

	@PostMapping("/api/v1/digitalbooks/author/{authorId}/books")
	public Book createBook(@PathVariable("authorId") Long authorId, @RequestBody Book book) throws Exception {
		Optional<User> user = userService.fetchUserById(authorId);
		if (user.isPresent()) {
			book.setAuthor(user.get().getFirstName());
		} else {
			throw new Exception("Author not found!");
		}
		bookService.saveBook(book);
		return book;
	}

	@GetMapping("/api/v1/digitalbooks/search")
	public Book searchBook(@RequestParam String category, @RequestParam String title, @RequestParam Double price,
			@RequestParam String publisher, @RequestParam String author) throws Exception {
		Book book = null;
		book = bookService.fetchByCategoryAndTitleAndPriceAndPublisherAndAuthor(category, title, price, publisher,
				author);
		if(book!=null && book.getStatus().equalsIgnoreCase("unblock")) {
		return book;
		}else {
			throw new Exception("This book is blocked");
		}
	}

	@GetMapping("/api/v1/digitalbooks/reader/{email}/books")
	public List<Book> fetchAllSubscribedBooks(@PathVariable("email") String email) {
		User user = userService.fetchUserByEmailId(email);
		List<Subscription> subscriptionList = subscriptionService.fetchAllSubscribedBooks(user.getId());
		List<Book> bookList = new ArrayList<>();
		for (Subscription subscription : subscriptionList) {
			Optional<Book> book = bookService.fetchByBookId(subscription.getBookId());
			bookList.add(book.get());
		}

		return bookList;
	}

	@GetMapping("/api/v1/digitalbooks/reader/{email}/books/{subscriptionId}")
	public Book fetchSubscribedBook(@PathVariable("email") String email,
			@PathVariable("subscriptionId") Long subscriptionId) {
		User user = userService.fetchUserByEmailId(email);
		Subscription subscription = subscriptionService.fetchBookIdByUserIdAndSubscriptionId(user.getId(),
				subscriptionId);
		Optional<Book> book = bookService.fetchByBookId(subscription.getBookId());
		return book.get();
	}

	@GetMapping("/api/v1/digitalbooks/reader/{email}/books/{subscriptionId}/read")
	public String readBookContent(@PathVariable("email") String email,
			@PathVariable("subscriptionId") Long subscriptionId) {
		User user = userService.fetchUserByEmailId(email);
		Subscription subscription = subscriptionService.fetchBookIdByUserIdAndSubscriptionId(user.getId(),
				subscriptionId);
		Optional<Book> book = bookService.fetchByBookId(subscription.getBookId());
		return book.get().getContent();
	}

	@PutMapping("/api/v1/digitalbooks/author/{authorId}/books/{bookId}")
	public Book editBook(@PathVariable("authorId") Long authorId, @PathVariable("bookId") Long bookId,
			@RequestBody Book book) throws Exception {
		Optional<Book> bookObj = bookService.fetchByBookId(bookId);
		if (book.getActive() != null) {
			bookObj.get().setActive(book.getActive());
		}
		if (book.getAuthor() != null) {
			bookObj.get().setAuthor(book.getAuthor());
		}
		if (book.getCategory() != null) {
			bookObj.get().setCategory(book.getCategory());
		}
		if (book.getContent() != null) {
			bookObj.get().setContent(book.getContent());
		}
		if (book.getPrice() != null) {
			bookObj.get().setPrice(book.getPrice());
		}
		if (book.getPublisher() != null) {
			bookObj.get().setPublisher(book.getPublisher());
		}
		if (book.getStatus() != null) {
			bookObj.get().setStatus(book.getStatus());
		}
		if (book.getTitle() != null) {
			bookObj.get().setTitle(book.getTitle());
		}
		bookService.saveBook(bookObj.get());
		return bookObj.get();
	}

	@PostMapping("/api/v1/digitalbooks/author/{authorId}/books/{bookId}")
	public String blockBook(@PathVariable("authorId") Long authorId, @PathVariable("bookId") Long bookId,
			@RequestParam(value="block") String block) {
		String status=null;
		Optional<Book> book = bookService.fetchByBookId(bookId);
		if(block.equalsIgnoreCase("yes")) {
		book.get().setStatus("block");
		status = "Book is blocked";
		}else if(block.equalsIgnoreCase("no")) {
			book.get().setStatus("unblock");
			status = "Book is unblocked";
		}
		bookService.saveBook(book.get());
		return status;
	}
	
	@GetMapping("/api/v1/digitalbooks/fetchBookById/{bookId}")
	public Book fetchBookById(@PathVariable("bookId") Long bookId) {
		Optional<Book> bookObj=bookService.fetchByBookId(bookId);
		return bookObj.get();
	}
}
