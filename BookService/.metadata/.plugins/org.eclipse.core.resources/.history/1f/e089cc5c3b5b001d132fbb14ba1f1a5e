package com.digitalbooks.bookservice.service;

import java.util.List;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Optional;
import java.util.zip.DataFormatException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.digitalbooks.bookservice.entity.Book;
import com.digitalbooks.bookservice.repository.BookRepository;

@Service
public class BookService {
	
	@Autowired
	private BookRepository bookRepository;
	
	public Book saveBook(Book book) {
		return bookRepository.save(book);
	}
	

	public List<Book> findByCategoryAndStatus(String category,String status){
		return bookRepository.findByCategoryAndStatus(category, status);
	}
	public List<Book> findByTitleAndStatus(String title,String status){
		return bookRepository.findByTitleAndStatus(title, status);
	}
	public List<Book> findByAuthorAndStatus(String author,String status){
		return bookRepository.findByAuthorAndStatus(author, status);
	}
	public List<Book> findByCategoryAndTitleAndStatus(String category, String title, String status){
		return bookRepository.findByCategoryAndTitleAndStatus(category, title, status);
	}
	public List<Book> findByCategoryAndAuthorAndStatus(String category, String author, String status){
		return bookRepository.findByCategoryAndAuthorAndStatus(category, author, status);
	}
	public List<Book> findByTitleAndAuthorAndStatus(String title, String author, String status){
		return bookRepository.findByTitleAndAuthorAndStatus(title, author, status);
	}
	public List<Book> findByCategoryAndTitleAndAuthorAndStatus(String category,String title, String author, String status){
		return bookRepository.findByCategoryAndTitleAndAuthorAndStatus(category,title, author, status);
	}
	public Optional<Book> fetchByBookId(Long bookId) {
		return bookRepository.findById(bookId);
	}
	public List<Book> fetchByAuthorEmail(String authorEmail) {
		return bookRepository.findByAuthorEmail(authorEmail);
	}
	public void deleteBook(Long bookId) {
		bookRepository.deleteById(bookId);
	}
	
	// compress the image bytes before storing it in the database
		public static byte[] compressBytes(byte[] data) {
			Deflater deflater = new Deflater();
			deflater.setInput(data);
			deflater.finish();

			ByteArrayOutputStream outputStream = new ByteArrayOutputStream(data.length);
			byte[] buffer = new byte[1024];
			while (!deflater.finished()) {
				int count = deflater.deflate(buffer);
				outputStream.write(buffer, 0, count);
			}
			try {
				outputStream.close();
			} catch (IOException e) {
			}
			System.out.println("Compressed Image Byte Size - " + outputStream.toByteArray().length);

			return outputStream.toByteArray();
		}
}
